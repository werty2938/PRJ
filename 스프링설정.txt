111
----------스프링 설치----------

1) 이클립스 + sts 플러그인 설치
2) https://spring.io에서 sts.exe를 다운하여 사영
-------------------------------
----------스프링 설치----------
1)컴퓨터 관리에서 -> 로컬사용자및 그룹 -> 사용자계정 반드시 영어(한글,특수문자,-,뭐등등 다빼기)
2)java_home,java_path    
3)work-space를 잘 지정해줘야함. 나는 새로운 저장폴더를 만들었음
4)이클립스-> Marketplace에서 sts를 검색하고 Spring Tools 4 를 다운받고
5)Eclipse Marketplace 업데이트 하지말고 sts먼저 싹 다깔고 뭐 필요하면 marketplace하기
6)sts를 검색해서 add on 을 검색해서 Spring Tools 3 Add-On을 다운받는다.
7) spring Legacy Project를 열어준다.
이유는 Spring Tools 4는Spring Legacy Project가 없어서  Spring Tools 3 Add-On 을 깔아야  Spring Legacy Project

-------------------------------

pom.xml 에 내가필요한(dependence)것을 받아서 쓰게 된다.
스프링 프로젝트 하나가 돌아가는데 디펜던시가 몇십개씩 연결하는데 디펜던씨의 버전관리를 잘해야한다.
하나라도 호환을 못하면 오류방방
-------------------------------
other->spring legacy project->Spring MVC Project->com.pknu.hello (패키지는 2단계 이상의 패키지경로로((.)이 2개이상) 지정해주는게 좋다)
가만히 있어도 x 가 생기는데 가만히 있으면 파일이 생성되고 x 가 사라짐(jsp를 생성한다)
-------------------------------
javaResource안에 src/main/java 폴더안에 있는거랑 src안에있는 경로랑 똑같다.
-------------------------------
그러면 servers에서 톰캣을 설정해주고 start시키고 -> servers프로젝트에서 server.xml 에서 port=8080을 9090으로 바꿔야함. 왜냐하면 지금 db를 8080사용하고 있어서 
또한 java build path에서 Libraries -> add Library에서 server runtime을 추가시켜준다.
-------------------------------
Libraries 안에 Maven이 Spring을 사용하는 라이브러리 묶음

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pknu</groupId>
	<artifactId>hello</artifactId>
	<name>hello</name>
	<packaging>war</packaging> <!-- 웹의 경우에는 war -->
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	<properties> 
		<java-version>1.8</java-version>
		<org.springframework-version>4.2.4.RELEASE</org.springframework-version> <!-- 이렇게 바꾸면 Maven이 자동으로 Libraries의 spring-context-3.1.1.RELEASE.jar 을 바꾼다 -->
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>


자동 : Maven이 내가 pom.xml을 바꾸면 자동으로 Libraries을 바꾼다.
수동 : 프로젝트에 마우스 우클릭 ->Maven ->Update project한다.


스프링은 pom.xml에서는 java-version이 1.8인데 hello프로젝트에 Properties의 JRE System Library 의 자바 버전도 바꿔준다.-->project facets에서 java의 버전과 Dynamic Web Module의 버전도 바꿔준다. java의 1.8과 Dynamic Web Module 3.1
구글에 : 메이븐 리포지토리(창고)를 검색해서 https://mvnrepository.com/ 들어가서 spring을 검색   Spring Context 들어가서 4.2.4 / 또 jstl도 검색해서 해당 1.2버전 확인하고 pom.xml에서 보면 dependency안에 채워넣으면 됌 (근데 이미 있음)
아래에 Overview와 Dependencies 뭐 등등이 있는데 Dependency Hierarchy 안에 서로의 종속관계를 확인할 수 있다.

스프링에서 views안에 home.jsp에서  dispatcher servlet이 자동으로 실행하는데 얘는 컨트롤러다. 얘가 숨어서 요청에 따라서 필요한 곳에 다가 통제를 제어한다. 마지막에 이 jsp를 파싱해서 html을 내려다 보내줘서 브라우저에 실행되게 만든다. 
-------------------------------

xml에다가 이 클래스는 뭐가 필요한지 다 저장시켜놓으면 해당 클래스에서 new할 필요없다. 이게 Dependence Injection 이라고 함...
-------------------------------

빌드도구인 Maven ( 빌드란 소스코드 파일을 .java 와 .xml.jar 등등을 JVM이나 톰캣과 같은 was가 인식할 수 있도록 패키징하는 결과물

---------------------------------------
---------------------------------------
------------2020 07 16-----------------
---------------------------------------
---------------------------------------

------------WebPrj02-------------------
Java Resuouces 에서 HomeController.java 에서 return "home"   -> list 로 바꿨을때 실행시키면 오류가 뜬다
src->main->webapp->web-Inf -> views-> home.jsp를 list.jsp로 바꿔야함
------------WebPrj03-------------------
   WebPrj03시작
   jsp project ->Spring mvc project 변경하는방법
   Dynamic Web Project -> Spring Legacy Project 변경하는방법
   
webContent는 jsp가 저장되는 폴더 -> 스프링으로 가면 webContent가 webapp으로 바뀐다.
new - other -> Dynamic web Project -> next -> remove -> add folder -> src/main/java -> next -> webContent를 webapp -> web.xml이 없다면 마우스 우클릭해서 java ee Tool에서 generate 뭐 그거 선택하면됌
프로젝트 우클릭->configure -> convert to Maven ->group id 를 com.pknu로 바꿔준다

그럼 pom.xml에 들어와서 비교를 해보면 엄청 다르다.  그래서 각각을 추가해준다.groupId, artifactId , version을 추가해준다.

https://mvnrepository.com/  - Spring Context » 4.2.4.RELEASE에서  추가를 해준다.

Spring Web MVC » 4.2.4.RELEASE   추가를 해준다.


레거시로 하면 초기에 엄청많은 내용들이 xml에 생기고 다양한 라이브러리를 다 갖추고 시작함. 

근데 레거시로 안하는 이유는 안 무겁게 하고 뭐 m2파일이(c->사용자->PKNU->.m2) 라이브러리의 목록을 가지고 있음

------------------------------------------
스프링은 디스패처 서블릿을 반드시 만들어야 한다. 디스패처 서블릿이 클라이언트의 요청을 

web.xml에다가 서블릿을 만들때 추가를 시켜줘야한다.
그러니깐 서블릿만들때 @ 애노베이션? 뭐 그런거를 연결시켜줘야하는데 Dispatcher Servlet


이 프로젝트에 접근하는 방법. 브라우저에서 인터넷주소줄에 ip와 포트,프로젝트 이름을 주어서 on server 를 실행하면 여기로 찾아옴
servlet-mapping의 servlet-name 에 스프링으로 이름을 가진 서블릿을 만들어주고 

그럼 url-pattern에 / << 나누기로 들어온 브라우저 웹의 서버의 요청은  spring이란 이름으로 처리하고 그 다음에 servlet-class의 DispatcherServlet 


라이브러리 관련은 pom.xml  ||   웹관련은 web.xml   ||    스프링 sping.servlet-xml 


Dispatcher servlet의 설정을 관리해주는 파일을 하나 만든다.  -> WEB-INF에서 new 해서 spring bean configuration 을 만들어준다.
spring-servlet.xml라는 파일명을 만들어주는데 이 이름은 web.xml의 <servlet>의<servlet-name> 이름에 따라서 파일명이 바뀐다.
그 다음에 아래 Source가 있는 부분에 namespaces에서 aop,beans,context,mvc,p를 체크하고 소스로 돌아가면 사이트 주소들을 import를 한것.
xmlns,xmlns:xsi이런것들은 xmlnamespace라고 생각하고 또 import라고 생각 ,import가 라이브러리의 이름과 클래스를 지정해주는 것이다.
하지만 import한다고 내 소스가 된것은 아니기 때문에 <context:annotation-config/> 단일태그를 하나 만들어준다. 
이 말의 뜻은 ANNOTATION을 사용하겠다. 
원래 xml에 많은 설정을 해야할 것들을 애노테이션으로 사용하게 하기 위해서 
<context:component-scan base-package="com.pknu.spring.comtroller"/> 를 추가해준다. 
얘는 디스패처서블릿이 필요한 자바를 호출할때 그 해당 자바를 컨트롤러라고 부른다. 그 컨트롤러는 어디에 있지? 여기 가서 scan해서 찾아라. 


https://mangkyu.tistory.com/18    디스패처 서블릿이란
디스패처 서블릿이란 ?   Servlet Container에서 HTTP프로토콜을 통해 들어오는 모든 요청을 프레젠테이션 계층의 제일앞에 둬서 중앙집중식으로 처리해주는 프론트 컨트롤러(Front Controller)

---------------------------------------------12:00

<context:component-scan base-package="com.pknu.spring.comtroller"/>의 파일을 만들어준다.
파일의 경로는 java Resource에 src/main/java에 com.pknu.spring.comtroller 패키지를 만들어준다.

서블릿은 크롬이나 익스플로어가 톰캣을 통해서 접속이 가능하다.  서블릿은 디스패처 서블릿을 호출하는거지 그럼 디스패처 서블릿은 a라는 자바, b라는 자바를 호출하는 역할을 함.

그다음에 패키지안에 java class를 만들어준다.애노테이션은 바로 아래의 함수만 먹힘. 


@Controller
public class HelloController {
	@RequestMapping("/hello")
	public String Hello() {
		return "/WEB-INF/views/hello.jsp";

만약에 인터넷 주소줄에서 /hello를 부르면 바로 아래의 Hello()을 호출되고 return 이 실행되지.

그럼 return에 맞춰서 해당 경로에 파일을 생성해준다. /WEB-INF/views/hello.jsp
JSP = HTML코드안에 JAVA 코드

그러면 헤드에 The superclass "javax.servlet.http.HttpServlet" was not found on   the Java Build Path 이런 오류가 뜸
그러면 <% 에서 오류가 뜨는데 이 말은 자바가 % 태그를 인식을 못하고 있는거잖아
그래서 해결하려면 방법1. Properties 가서  project facets -> runtime에서 톰캣을 실행해주기
방법2. java build dpath가서 libraries 에 톰캣이 없거나 버전이 안맞아서 문제가 발생 -> Add Library에서 톰캣을 넣어준다.

2가지 모두 만족했을떄 가능함.

Publishing failed with multiple errors 바로 실행하면 오류가 발생한다.     
프로젝트가 abcd 가 있는데 request mapping 이 hello가 여러가지 프로젝트에서 다같이 바라보면 문제가 발생한다.




Q. 스프링은 web content 에 있는데  jsp로 접근하는게 불가능함 
A. 스프링에서는 jsp를 직접 호출 못하게 하려고 WebContent말고 WEB-INF에 만들어 놓고 사용한다.


Mapping을 하는 이유는 보이는 바와 같이 일단 주소가 간결해진다.

딱 보기에도 어노테이션을 이용한 URL Mapping이 더 간단해 보입니다. 
예전에는 web.xml파일을 이용해 매핑을 하는 경우가 많았지만 요즘은 어노테이션을 이용해 매핑을 하는 경우가 더 늘어나는 추세라고 합니다.

-------------------------------------------15:00
spring-servlet.xml 에서 bean객체를 만드는데 스프링은 객체를 생성하고 초기화하는 기능을 제공하는데 스프링이 생성하는 객체를 빈객체라고 부르고
이 빈 객체에 대한 정보를 담고 있는 태그가 bean 태그이다. id와 class 두가지 속성을 갖는다.

스프링은 <property>태그를 처리할때 name속성에 지정한 값의 첫 글자를 대문자로 변환한뒤에 일치하는 set메소드를 실행한다.
   
   

----xml식 코딩
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/views/"/>
		
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"/>
	</bean>


-----자바식 코딩이 아래
viewResolver.serViewClass("org.springframework.web.servlet.view.InternalResourceViewResolver" );
viewResolver.serPrefix("/WEB-INF/views/" );
viewResolver.serSuffix(".jsp" );
viewResolver.serOrder("1" );


xml코딩을 통해 HelloController을 간단하게 처리가능 혹은 //return "/WEB-INF/views/hello.jsp"; 이렇게 리턴처리를 안해도 됌




---------------------------------------------16:00
---SpringPrj01---

convert to maven -> com.pknu 를 하면 현 프로젝트를 maven으로 바꾼다는 뜻

web.xml에서 welcome-file이 index.jsp잖아 그럼 WebContent에서는 반드시 index.jsp 파일을 만들어야 한다.
만약에 index.jsp를 안만들려면 MainController.java에서 
@RequestMapping("/")
public String home(){
	return "first"
}
이걸 추가 시켜줘도 됌.




---------------------------------------
---------------------------------------
------------2020 07 17-----------------
---------------------------------------
---------------------------------------
---------------------------------------------09:00
SpringPrj02 프로젝트 생성하고 -> add folder -> src/main/java -> web.xml 까지 생성해준다.
configure -> convert to Maven ->group id 를 com.pknu -> 하면 pom.xml이 생성된다.


--------------
src: 자바소스파일이나 XML 등의 설정 파일위치
WebContent: 웹관련 파일위치
WEB-INF : web.xml파일 위치
WEB-INF/lib : 스프링 의존 모듈을 포함한 jar파일 위치
lib: 스프링 의존 모듈을 포함한 jar 파일 위치

라이브러리 관련은 pom.xml  ||   convert  com.pknu 로 만들고
웹관련은 web.xml   	   ||    	java ee tools - stub 에서 만들면 web.xml이 생성된다
스프링 dispatcher.servlet-xml  ||   WEB-INF에서 마우스 오른쪽해서 new 해서 Spring bean Configuration File 로 만든다.
										---------------

생성하는 순서 
1.그 다음에 pom.xml에 dependency인 각종 라이브러리를  만들어두고  메이븐 프로젝트의 핵심 파일은 pom.xml이다 
2.그 다음에 web.xml에 servlet, servlet-mapping을 해주고 - 이 뜻이 스프링이 처음 시작할때 매 순간,페이지 이동할때 dispatcher이 작동하게 된다. 
3.그 다음에 dispatcher-servlet.xml 설정을 해준다.



java Resources -> com.pknu.user.controller 패키지를 만들고 controller 클래스를 만든다.

views를 각각 짜주고 

엄청 중요 !!!!!!!!
home.jsp에서 리턴타입을 /패키지명/파일명 이렇게 해도되는데 /파일명으로 하려고 하려면 Properties에서 -> Web Project Settings에서 Context root를 / 이걸로 바꿔줘야한다.

그 다음에 꼭 전부다 재시작을 해야함 서버도 clean하고 자바도 함 껏다키라



한글깨짐

저장 방식 
1) GET 처리
	TOMCAT CONF -> SERVER.XML 69라인에 
    
    <Connector port="9090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
            URIEncoding = "UTF-8"


2) post 처리
 2-1) web.xml 
<!-- 한글처리 -->
	<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 

 2-2) .jsp
	파일 저장시 인코딩 : utf-8  : 파일저장할때 인코딩 방식

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<meta charset="UTF-8">


 2-3) dispatcher-servlet.xml

<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
		<property name="contentType" value="text/html; charset=UTF-8"/> 
	</bean>


------------------------------------------------------------------------------------------








AOP Aspect Oriented Programming
OOP Object Oriented Programming - 사용자가 원하는 업무 기반의 로직만 관심을 가진다. 근데 

컴퓨팅에서 로그파일은 운영 체제나 다른 소프트웨어가 실행 중에 발생하는 이벤트나 각기 다른 사용자의 통신 소프트웨어 간의 메시지를 기록한 파일이다




----

SpringPrj03  DI  			 xml에서 생성자를 이용
SpringPrj04  DIAnnotation		 
SpringPrj05 AOP
SpringPrj06 AOPAnnotation 

DI 는 main에 필요한 new를 xml에 저장해놓는게 application context이 친구가 읽어서 xml을 읽어서 bean태그에 있는 것을 자동으료 new 해놓고 내가 원하는 소스에 다가  생성자,setter에 해당하는것을 자동으로 해줄수 있다.
     객체가 컨테이너에서 종속객체를 찾아오는 것이 아니라 요청하지 않아도 beans에 인스턴스가 생성되면 컨테이너가 그 객체에 필요한 종속객체를 자동으로 찾아 주는 것


aop는 point cut  aop설정만 할줄알면 된다. 그 두개를 씀으로서 공통코딩을 내가 원하는 시점에 앞이나 뒤에 넣는것이 aop라고 하는것 
내가 원하는 공통코딩을 저장해놓고 앞뒤에 걍 집어 쳐넣으면 됌. Annotation 



------------------------------------------------------------------------------------

private SqlSession sqlSession;

public void setSqlSession(SqlSession sqlSession){
	this.sqlSession = sqlSession;
}


0) @Component  -를 붙이면 여러가지 annotation사용가능

1) @Controller - 를 붙이면 @RequstMapping를 사용할 수 있다. 
2) @Service - 를 붙이면 business logic을 저장해놓은곳 
3)  @Repository - DB와 관련된 저장소를 저장해놓은곳 . DB명령어를 사용할 수 있다.

빈 관리 : @Component, @Controller, @Service, @Repository   -- 이것들을 통해서 beans에 등록할수 있고 
빈 주입 : @Resource, @Autowired

@Resource는 클래스의 이름이 아니라 등록된 빈의 이름으로 검색하여 빈을 주입해준다 @Resource(name="")

@Service("") 을 사용하면 괄호안의 클래스를 스프링에 "" 라는 이름으로 등록할 수 있고 @Autowired 를 사용하여 자동으로 주입 받을 수 있다
@Service 를 사용하여 빈을 등록할 때 이름을 지정하지 않으면 클래스의 첫자를 소문자로 바꾼 후에 빈의 이름으로 사용된다

@Autowired 를 사용하면 빈 클래스 이름(변수의 타입)으로 검색하여 빈을 찾아 주입해준다


	@Autowired
	private BoardService boardService; 
	
//	Autowired 역할
//	private BoardService boardService;
//	public void setSqlSession(BoardService boardService) {
//		this.boardService =  boardService;
//	}

//




===================================================================================
07 . 30 Spring json 

json형태는 {} 이거고 ajax기술을 사용해서 보낸다.
기본 자바 클래스에 웹능력이 보태진게 서블릿이라고 한다.


web.xml에 그 동작이 dispatcher servlet을 사용하라고 하는거임 


@requestmapping밑에다가  @Responsebody를 적으면 json, xml 형태로 바꿔서 client에 뿌려준다.



@ResponseBody
메소드에서 @ResponseBody 어노테이션을 사용하면 Spring은 반환 값을 변환하여 HTTP Response 에 자동으로 씁니다. Controller 클래스의 각 메소드에는 @ResponseBody 어노테이션이 있어야합니다.

클라이언트 --(Request)--> DispatcherServlet -> Handler Mapping
							|
							|
							|
클라이언트<--(Response)--------(ResponseBody)--------Controller


@RestController
Spring 4.0은 @Controller와 @ResponseBody 을 합쳐놓은것 이상의 역할을 수행하는@RestController를 추가했습니다. 컨트롤러 클래스에 @RestController 어노테이션을 작성함으로써 더 이상 @ResponseBody를 모든 요청 매핑 메소드에 추가 할 필요가 없습니다. @ResponseBody 어노테이션은 이제 기본으로 작동..!

클라이언트 --(Request)--> DispatcherServlet -> Handler Mapping
							|
							|
							|
클라이언트<-------------(HTTP ResponseBody) Rest Controller(@Controller+@ResponseBody)




794306f489b73e2728e234bc266fcd21

	http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=794306f489b73e2728e234bc266fcd21&targetDt=20200701
http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=430156241533f1d058c603178cc3ca0e&targetDt=20120101
